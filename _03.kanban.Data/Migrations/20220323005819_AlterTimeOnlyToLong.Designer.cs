// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _03.kanban.Data.Context;

#nullable disable

namespace kanban.Data.Migrations
{
    [DbContext(typeof(kanbanContext))]
    [Migration("20220323005819_AlterTimeOnlyToLong")]
    partial class AlterTimeOnlyToLong
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("kanban.Core.Entities.Board", b =>
                {
                    b.Property<long>("BrdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("brd_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BrdId"));

                    b.Property<DateTime>("BrdCreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("brd_create_date");

                    b.Property<string>("BrdDescription")
                        .HasColumnType("text")
                        .HasColumnName("brd_description");

                    b.Property<string>("BrdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("brd_name");

                    b.Property<long>("UseId")
                        .HasColumnType("bigint")
                        .HasColumnName("use_id");

                    b.HasKey("BrdId")
                        .HasName("pk_board");

                    b.HasIndex("UseId");

                    b.ToTable("board", (string)null);
                });

            modelBuilder.Entity("kanban.Core.Entities.Card", b =>
                {
                    b.Property<long>("CrdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("crd_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CrdId"));

                    b.Property<long?>("CrdBalanceTime")
                        .HasColumnType("bigint")
                        .HasColumnName("crd_balance_time");

                    b.Property<DateTime>("CrdCreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("crd_create_date");

                    b.Property<string>("CrdDescription")
                        .HasColumnType("text")
                        .HasColumnName("crd_description");

                    b.Property<long>("CrdEstimatedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("crd_estimated_time");

                    b.Property<DateTime?>("CrdExpectedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("crd_expected_date");

                    b.Property<int>("CrdSequence")
                        .HasColumnType("integer")
                        .HasColumnName("crd_sequence");

                    b.Property<string>("CrdTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("crd_title");

                    b.Property<DateTime?>("CrdUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("crd_update_date");

                    b.Property<long>("GrpId")
                        .HasColumnType("bigint")
                        .HasColumnName("grp_id");

                    b.Property<long>("SttId")
                        .HasColumnType("bigint")
                        .HasColumnName("stt_id");

                    b.Property<long>("UseId")
                        .HasColumnType("bigint")
                        .HasColumnName("use_id");

                    b.HasKey("CrdId")
                        .HasName("pk_card");

                    b.HasIndex("GrpId");

                    b.HasIndex("SttId");

                    b.HasIndex("UseId");

                    b.ToTable("card", (string)null);
                });

            modelBuilder.Entity("kanban.Core.Entities.Departament", b =>
                {
                    b.Property<long>("DptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("dpt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DptId"));

                    b.Property<DateTime>("DptCreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dpt_create_date");

                    b.Property<string>("DptName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dpt_name");

                    b.HasKey("DptId")
                        .HasName("pk_departament");

                    b.ToTable("departament", (string)null);
                });

            modelBuilder.Entity("kanban.Core.Entities.Group", b =>
                {
                    b.Property<long>("GrpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("grp_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GrpId"));

                    b.Property<long>("BrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("brd_id");

                    b.Property<DateTime>("GrpCreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("grp_create_date");

                    b.Property<int>("GrpSequence")
                        .HasColumnType("integer")
                        .HasColumnName("grp_sequence");

                    b.Property<string>("GrpTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("grp_title");

                    b.HasKey("GrpId")
                        .HasName("pk_groups");

                    b.HasIndex("BrdId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("kanban.Core.Entities.Status", b =>
                {
                    b.Property<long>("SttId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("stt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SttId"));

                    b.Property<string>("SttColor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("stt_color");

                    b.Property<string>("SttDescription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("stt_description");

                    b.HasKey("SttId")
                        .HasName("pk_status");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("kanban.Core.Entities.User", b =>
                {
                    b.Property<long>("UseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("use_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UseId"));

                    b.Property<DateTime>("UseCreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("use_create_date");

                    b.Property<string>("UseEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("use_email");

                    b.Property<string>("UseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("use_name");

                    b.Property<string>("UsePassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("use_password");

                    b.HasKey("UseId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TasksDepartament", b =>
                {
                    b.Property<long>("DptId")
                        .HasColumnType("bigint")
                        .HasColumnName("dpt_id");

                    b.Property<long>("CrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("crd_id");

                    b.HasKey("DptId", "CrdId")
                        .HasName("pk_tasks_departament");

                    b.HasIndex("CrdId");

                    b.ToTable("tasks_departament", (string)null);
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Property<long>("UseId")
                        .HasColumnType("bigint")
                        .HasColumnName("use_id");

                    b.Property<long>("CrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("crd_id");

                    b.HasKey("UseId", "CrdId")
                        .HasName("pk_team");

                    b.HasIndex("CrdId");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("kanban.Core.Entities.Board", b =>
                {
                    b.HasOne("kanban.Core.Entities.User", "Use")
                        .WithMany("Boards")
                        .HasForeignKey("UseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_board_reference_users");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("kanban.Core.Entities.Card", b =>
                {
                    b.HasOne("kanban.Core.Entities.Group", "Grp")
                        .WithMany("Cards")
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_card_reference_groups");

                    b.HasOne("kanban.Core.Entities.Status", "Stt")
                        .WithMany("Cards")
                        .HasForeignKey("SttId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_card_reference_status");

                    b.HasOne("kanban.Core.Entities.User", "Use")
                        .WithMany("Cards")
                        .HasForeignKey("UseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_card_reference_users");

                    b.Navigation("Grp");

                    b.Navigation("Stt");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("kanban.Core.Entities.Group", b =>
                {
                    b.HasOne("kanban.Core.Entities.Board", "Brd")
                        .WithMany("Groups")
                        .HasForeignKey("BrdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_groups_reference_board");

                    b.Navigation("Brd");
                });

            modelBuilder.Entity("TasksDepartament", b =>
                {
                    b.HasOne("kanban.Core.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CrdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_de_reference_card");

                    b.HasOne("kanban.Core.Entities.Departament", null)
                        .WithMany()
                        .HasForeignKey("DptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_de_reference_departam");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.HasOne("kanban.Core.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CrdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_team_reference_card");

                    b.HasOne("kanban.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_team_reference_users");
                });

            modelBuilder.Entity("kanban.Core.Entities.Board", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("kanban.Core.Entities.Group", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("kanban.Core.Entities.Status", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("kanban.Core.Entities.User", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
